{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\n//Custom Error\nerror FundMe__NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public immutable i_minimumUSd = 50 * 1e18;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n\n    AggregatorV3Interface private s_priceFeed;\n\n    address private immutable i_owner;\n\n    modifier onlyOwner() {\n        // require(msg.sender == owner, \"Sender is not owner !.\");\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getCoversionRate(s_priceFeed) >= i_minimumUSd,\n            \"Didn't send enough .\"\n        );\n        // require(getCoversionRate(msg.value) >= minimumUSd, \"Diddnt send enough .\");\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n        //  return (msg.value);\n    }\n\n    function withDraw() public onlyOwner {\n        // require(msg.sender == owner, \"Sender is not owner .\");\n        // For loop .\n        for (\n            uint256 fundersIndex = 0;\n            fundersIndex < s_funders.length;\n            fundersIndex++\n        ) {\n            address funder = s_funders[fundersIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n\n        (bool onSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(onSuccess, \"WithDraw is failed .\");\n    }\n\n    function cheapWithDraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        //mapping do not happing in memory\n        for (\n            uint256 fundersIndex = 0;\n            fundersIndex < funders.length;\n            fundersIndex++\n        ) {\n            address funder = funders[fundersIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n\n        (bool onSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(onSuccess, \"WithDraw is failed .\");\n\n        // function withdraw(){}\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getfunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(\n        address funderAddress\n    ) public view returns (uint256) {\n        return s_addressToAmountFunded[funderAddress];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n\r\n    function getPrice(AggregatorV3Interface priceFeed)internal  view returns (uint256) {\r\n        //  AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\r\n          (,int answer ,  ,  ,  )=priceFeed.latestRoundData();\r\n\r\n          return  uint256(answer * 1e10);\r\n\r\n    }\r\n\r\n    function getCoversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal  view returns (uint256)  {\r\n   \r\n        uint256  etherPrice = getPrice(priceFeed);\r\n        uint256 ethAmountUSD =(etherPrice * ethAmount) / 1e18;\r\n\r\n        return ethAmountUSD;\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}