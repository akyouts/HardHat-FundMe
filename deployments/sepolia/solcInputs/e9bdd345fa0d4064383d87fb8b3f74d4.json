{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\n//Custom Error \nerror NotOwner();\n\ncontract FundMe{\n\n    using PriceConverter for  uint256 ;\n\n   \n    uint256 public  minimumUSd =50 * 1e18;  \n    address[] public  funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    AggregatorV3Interface public priceFeed;\n    \n\n    address public owner;\n    \n    constructor(address priceFeedAddress){\n       owner =msg.sender;\n       priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n\n    function fund() public payable  {\n        \n           require(msg.value.getCoversionRate(priceFeed) >= minimumUSd, \"Didn't send enough .\");\n        // require(getCoversionRate(msg.value) >= minimumUSd, \"Diddnt send enough .\");\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender]=msg.value;\n        //  return (msg.value);\n\n    }\n     \n     function withDraw() public onlyOwner {\n        // require(msg.sender == owner, \"Sender is not owner .\");\n        // For loop .\n        for(uint256 fundersIndex=0; fundersIndex < funders.length; fundersIndex++ ){\n            address funder = funders[fundersIndex];\n            addressToAmountFunded[funder] = 0;\n\n        }\n\n        // reset the Array.\n        // funders = new address[](0);\n\n        // // ways to transfer eth from contract .\n\n        // //transfer\n        // payable(msg.sender).transfer(address(this).balance);\n        // //send\n        // bool onSuccess = payable(msg.sender).send(address(this).balance);\n        // //call\n\n        (bool onSuccess,)= payable(msg.sender).call{ value: address(this).balance }(\"\");\n        require(onSuccess,\"WithDraw is failed .\");\n\n     }\n\n\n     modifier onlyOwner {\n        // require(msg.sender == owner, \"Sender is not owner !.\");\n        if(msg.sender != owner){\n            revert NotOwner(); \n        }\n        _;\n     }\n\n     \n\n\n     receive() external payable {\n\n        fund();\n      }\n\n      fallback() external payable { \n        fund();\n       }\n\n    \n\n    // function withdraw(){} \n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n\r\n    function getPrice(AggregatorV3Interface priceFeed)internal  view returns (uint256) {\r\n        //  AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\r\n          (,int answer ,  ,  ,  )=priceFeed.latestRoundData();\r\n\r\n          return  uint256(answer * 1e10);\r\n\r\n    }\r\n\r\n    function getCoversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal  view returns (uint256)  {\r\n   \r\n        uint256  etherPrice = getPrice(priceFeed);\r\n        uint256 ethAmountUSD =(etherPrice * ethAmount) / 1e18;\r\n\r\n        return ethAmountUSD;\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}